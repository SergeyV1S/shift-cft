name: cd

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  build:
    name: Build and Push Docker Image
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push shift-delivery Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:latest
          build-args: |
            BASE_API_URL=${{ secrets.BASE_API_URL }}

  deploy:
    name: Deploy using Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} > ~/.ssh/known_hosts

      - name: Debug Variables
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "REPOSITORY_NAME=${{ secrets.REPOSITORY_NAME }}"
          echo "BASE_API_URL=${{ secrets.BASE_API_URL }}"
          echo "PORT=${{ secrets.PORT }}"

      - name: Deploy Docker Container
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          BASE_API_URL: ${{ secrets.BASE_API_URL }}
          REPOSITORY_NAME: ${{ secrets.REPOSITORY_NAME }}
          PORT: ${{ secrets.PORT }}
        run: |
          ssh -T ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << EOF
          export DOCKER_USERNAME="${DOCKER_USERNAME}"
          export REPOSITORY_NAME="${REPOSITORY_NAME}"
          export BASE_API_URL="${BASE_API_URL}"
          export PORT="${PORT}"

          echo "Logging in to Docker..."
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

          echo "Removing old container..."
          docker container rm -f shift-delivery || true

          echo "Cleaning system..."
          docker system prune -a -f

          echo "Pulling new image..."
          docker pull $DOCKER_USERNAME/$REPOSITORY_NAME:latest

          echo "Running new container..."
          docker run -d --restart unless-stopped -p ${PORT}:80 --name shift-delivery -e BASE_API_URL=$BASE_API_URL $DOCKER_USERNAME/$REPOSITORY_NAME:latest

          EOF
